
function if_flow:
    trigger:
        print "start if"
        if "hello" is a string:
            set {var} to true
            assert true
        else if false:
            set {var} to false
            assert false
        else:
            set {var} to false
            assert false
        assert {var} is true
        if "hello" is a string:
            assert true
            if 1 is a string // jump to else
            assert false
        else:
            assert true
        if "hello" is a string:
            assert true
            if 1 is a string // jump to else-if
            assert false
        else if true: // always run
            assert true
        else: // never run
            assert false
        if 1 is 1:
            assert true
            break section
            assert false
        if 1 is 1:
            assert true
            break section if 1 is 2
            assert true
            break section if 1 is 1
            assert false
        if 1 is 1:
            assert true
            break section
            assert false
        else:
            assert false
        print "end if"

function loop_flow:
    trigger:
        print "start loop"
        set {var} to 0
        loop 3 times:
            set {var} to {var} + 1
        assert {var} is 3
        loop {var} times:
            set {var} to {var} + 1
        assert {var} is 6
        loop 0 times:
            assert false
        loop 4 times:
            assert true
            break section
            assert false
        loop 4 times:
            assert true
            if true:
                break loop
            assert false
        set {list} to a new list
        add "hello" to {list}
        loop {item} in {list}:
            assert {item} is "hello"
        loop {item} in (1, 2, 3):
            assert {item} is less than 5
        loop {item} in 1:
            assert {item} is 1
        loop {item} in (1, 2, 3, 2):
            assert {item} is less than 5
            if {item} is greater than 2:
                continue loop
            assert {item} is less than 3
        print "end loop"

function while_flow:
    trigger:
        print "start while"
        set {a} to false
        set {b} to true
        while {b}:
            exit section
            print "blob"
            wait 3 seconds
            assert false
            print "boo"
        while false:
            assert false
        print "finish while"
        return "ended"

function test_run:
    trigger:
        print "start deferred"
        set {var} to a new runnable:
            assert 1 is 1
        run {var}
        run {var} in the background
        run defer({var})
        set {x} to 2
        set {thing} to a new runnable:
            assert {x} is 2
        set {x} to 4
        run {thing}
        run {thing} in the background
        assert {x} is 4
        set {method} to the function "reflective(a)"
        run {method} with (2, 66) in the background
        print "end deferred"

function reflective (number):
    trigger:
        assert 2 is {number}

function defer (runnable):
    trigger:
        run {runnable}

function inline_headers:
    trigger:
        print "start inline"
        if true:
            assert true
            if false
            assert false
            print "w"
        print "end inline"
        if false
        print "3"
        print "4"

function closer: // to check the inlines closed in the previous function
    trigger:
        return null

function sleep_flow:
    trigger:
        set {thread} to the current process
        print "starting sleep"
        set {var} to a new runnable:
            print "waiting"
            wait 10 milliseconds
            wake {thread}
            print "woken"
        assert true
        run {var} in the background
        print "going to sleep"
        sleep
        print "done"
