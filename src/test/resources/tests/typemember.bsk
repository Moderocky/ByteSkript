
template type Thing:
    function empty_func:
    function my_func:
        return: String
    function another_func:
        trigger:
            return 10

type Box:
    template: Thing
    function bonk:
        return: Boolean
        trigger:
            set {var} to my_func() from this object
            assert {var} is "hello": "Member-local function didn't return properly."
            return true
    function my_func:
        return: String
        trigger:
            return "hello"
    function func_with_args (blob):
        return: Integer
        trigger:
            return 208 + {blob}
    function toString:
        return: String
        trigger:
            return "Hello?"

type Crate:
    extend: Box

function basic_use:
    trigger:
        set {thing} to a new Box
        assert {thing} exists: "Type creation failed."
        assert {thing} is a Box: "Type self-comparison failed."
        assert {thing} is a Thing: "Type template-comparison failed."
        assert "" + {thing} is "Hello?": "Type toString override failed."
        set {word} to my_func() from {thing}
        assert {word} is "hello": "Member function call failed."
        set {number} to func_with_args(3) from {thing}
        assert {number} is 211: "Member function call with args failed."
        set {boolean} to bonk() from {thing}
        assert {boolean} is true: "Member function didn't return correctly."
        assert another_func() from {thing} is 10: "Template default function didn't return correctly."
        set {thing} to a new Crate
        assert {thing} exists: "Type creation failed."
        assert {thing} is a Crate: "Type self-comparison failed."
        assert {thing} is a Box: "Type super-comparison failed."
        assert {thing} is a Thing: "Type super template-comparison failed."

template type Shape:
    function get_sides:

template type Quadrilateral:
    template: Shape
    function get_sides:
        trigger:
            return 4

type Square:
    template: Quadrilateral

type Rectangle:
    template: Quadrilateral

function multiple_inheritance:
    trigger:
        set {square} to a new Square
        set {rectangle} to a new Rectangle
        assert {square} exists: "Type creation failed."
        assert {rectangle} exists: "Type creation failed."
        assert {square} is a Square: "Type self-comparison failed."
        assert {square} is a Quadrilateral: "Type super-comparison failed."
        assert {square} is a Shape: "Type inherited super-comparison failed."
        assert {rectangle} is a Rectangle: "Type self-comparison failed."
        assert {rectangle} is a Quadrilateral: "Type super-comparison failed."
        assert {rectangle} is a Shape: "Type inherited super-comparison failed."
        assert get_sides() from {square} is 4: "Type default function failed."
        assert get_sides() from {rectangle} is 4: "Type default function failed."

type Getter:
    template: java/util/function/Supplier
    function get:
        trigger:
            return "hello"

function java_implement:
    trigger:
        set {getter} to a new Getter
        assert {getter} is a Getter: "Type self-comparison failed."
        set {class} to java/util/function/Supplier
        assert {getter} is a {class}: "Type java super-comparison failed."
        set {var} to get() from {getter}
        assert {var} is "hello": "Supplier get method failed."
        set {var} to result of {getter}
        assert {var} is "hello": "Supplier result-of failed."

type Runnable:
    template: java/lang/Runnable
    function run:
        return: none
        trigger:
            assert {_var} is 1: "Variable failed to transfer."
            set {_var} to 2

function runnable:
    trigger:
        set {thing} to a new Runnable
        set {_var} to 1
        run {thing}
        assert {_var} is 2: "Runnable failed to run."

type Foo:
    function box:
        trigger:
            return 2

type Bar:
    extend: foo
    function box:
        trigger:
            return 3

function test:
    trigger:
        set {foo} to a new bar
        assert {foo} is a foo
        assert {foo} is a bar
        assert box() from {foo} is 3
        run runnable()
        run basic_use()
        run java_implement()
        return true
